@page "/account"
@inject NavigationManager NavigationManager
@inject UserService userService
@inject PokémonService pokémonService
@using Front.Entities;
@using Front.Components.Widget;


<PageTitle>Connexion</PageTitle>

<div class="titleBanner">
	<img src="images/Mon-compte.png" alt="Inscription Image">
</div>

<div class="centrer">
	<div class="form-vertical">
		<EditForm Model="@userUpdate" OnValidSubmit="HandleUpdate">
			<label class="form-label">
				Nom
				<input @bind-value="LastName" placeholder="Ketchum" class="@(String.IsNullOrEmpty(ErrorLastName) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorLastName))
				{
					<p class="invalid-feedback">@ErrorLastName</p>
				}
			</label>
			<label class="form-label">
				Prénom
				<input @bind-value="FirstName" placeholder="Sacha" class="@(String.IsNullOrEmpty(ErrorFirstName) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorFirstName))
				{
					<p class="invalid-feedback">@ErrorFirstName</p>
				}
			</label>
			<label class="form-label">
				Pseudo
				<input @bind-value="Username" placeholder="NéoRed" class="@(String.IsNullOrEmpty(ErrorUsername) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorUsername))
				{
					<p class="invalid-feedback">@ErrorUsername</p>
				}
			</label>
			<label class="form-label">
				Adresse email
				<input @bind-value="Email" typeof="email" placeholder="sacha@oak.com" class="@(String.IsNullOrEmpty(ErrorEmail) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorEmail))
				{
					<p class="invalid-feedback">@ErrorEmail</p>
				}
			</label>
			<label class="form-label">
				Date de naissance
				<input type="date" @bind-value="BirthDate" placeholder="Date de naissance" class="@(String.IsNullOrEmpty(ErrorBirthDate) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorBirthDate))
				{
					<p class="invalid-feedback">@ErrorBirthDate</p>
				}
			</label>
			<label class="form-label">
				Sexe
				<input class="form-control" @oninput="SetGender" list="datalistOptions" placeholder="Sexe..." value="@(userService.GetGender(userUpdate.Gender))" required/>
				<datalist id="datalistOptions">
					@foreach (Gender g in Enum.GetValues(typeof(Gender)))
					{
						<option value="@userService.GetGender(g)">@userService.GetGender(g)</option>
					}
				</datalist>
			</label>

			<label class="form-label">
				<button type="button" class="btn @(isPublic ? "btn-outline-primary" : "btn-outline-danger")" @onclick="@SwitchProtection">@(isPublic ? "Ma collection est publique" : "ma collection est privée")</button>
			</label>

			<p><br/></p>

			@if (!string.IsNullOrEmpty(errorUpdateMessage))
			{
				<p class="alert alert-danger">@errorUpdateMessage</p>
			}

			<button class="btn btn-success" type="submit" disabled="@(!ValidUpdate)">Mettre à jour</button>
		</EditForm>
	</div>
</div>


<div class="centrer">
	<div class="form-vertical">
		<EditForm Model="@userPasswordChange" OnValidSubmit="HandlePasswordUpdate">

			<label class="form-label">
				Mot de passe actuel
				<input @bind-value="OldPassword" type="password" placeholder="Mot de passe" class="@(String.IsNullOrEmpty(ErrorOldPassword) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorOldPassword))
				{
					<p class="invalid-feedback">@ErrorOldPassword</p>
				}
			</label>
			<label class="form-label">
				Nouveau mot de passe
				<input @bind-value="NewPassword" type="password" placeholder="Nouveau mot de passe" class="@(String.IsNullOrEmpty(ErrorNewPassword) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorNewPassword))
				{
					<p class="invalid-feedback">@ErrorNewPassword</p>
				}
			</label>
			<label class="form-label">
				Confirmation du mot de passe
				<input @bind-value="ConfirmPassword" type="password" placeholder="Confirmation du mot de passe" class="@(String.IsNullOrEmpty(ErrorConfirmPassword) ? "form-control": "form-control is-invalid")" required />
				@if (!string.IsNullOrEmpty(ErrorConfirmPassword))
				{
					<p class="invalid-feedback">@ErrorConfirmPassword</p>
				}
			</label>

			@if (!string.IsNullOrEmpty(errorPasswordMessage))
			{
				<p class="alert alert-danger">@errorPasswordMessage</p>
			}

			<button class="btn btn-danger" type="submit" disabled="@(!ValidPassword)">Changer mon mot de passe</button>
		</EditForm>
	</div>
</div>


<div class="centrer">
	<div class="form-vertical">
		<div class="alert alert-danger">

			<Captcha Check="CCheck"></Captcha>

			<button class="btn @(CChecked ? "btn-danger": "btn-outline-danger")" disabled="@(!CChecked)" @onclick="HandleSuppression">Supprimer le compte</button>
		</div>
	</div>
</div>


@code {
	[Parameter] public string Redirect { get; set; } = "/";

	private string? ErrorEmail, ErrorUsername, ErrorFirstName, ErrorLastName, ErrorBirthDate;
	private string? ErrorConfirmPassword, ErrorNewPassword, ErrorOldPassword;

	private EmailAddressAttribute emailValidationAttribute = new();
	private string _comfirmPassword = "";

	public void SwitchProtection()
	{
		isPublic = !isPublic;
		StateHasChanged();
	}

	public bool ValidUpdate
	{
		get
		{
			return String.IsNullOrEmpty(ErrorEmail) &&
			String.IsNullOrEmpty(ErrorFirstName) &&
			String.IsNullOrEmpty(ErrorLastName) &&
			String.IsNullOrEmpty(ErrorUsername) &&
			String.IsNullOrEmpty(ErrorBirthDate);
		}
	}

	public bool ValidPassword
	{
		get
		{
			return String.IsNullOrEmpty(ErrorOldPassword) &&
			String.IsNullOrEmpty(ErrorConfirmPassword) &&
			String.IsNullOrEmpty(ErrorNewPassword) &&
			!String.IsNullOrEmpty(ConfirmPassword) &&
			!String.IsNullOrEmpty(OldPassword) &&
			!String.IsNullOrEmpty(NewPassword);
		}
	}

	public string ConfirmPassword
	{
		get { return _comfirmPassword; }
		set
		{
			_comfirmPassword = value;
			if (value != NewPassword && !String.IsNullOrEmpty(value) && !String.IsNullOrEmpty(NewPassword)) ErrorConfirmPassword = "Les mots de passe ne correspondent pas";
			else ErrorConfirmPassword = null;
		}
	}

	public string OldPassword
	{
		get { return userPasswordChange.OldPass; }
		set
		{
			userPasswordChange.OldPass = value;
			if (value.Length < 8 || value.Length > 40) ErrorOldPassword = "Le mot de passe doit contenir entre 8 et 40 caractères";
			else if (!value.Any(c => char.IsDigit(c))) ErrorOldPassword = "Le mot de passe doit contenir au moins un chiffre";
			else if (!value.Any(c => char.IsUpper(c))) ErrorOldPassword = "Le mot de passe doit contenir au moins une majuscule";
			else if (!value.Any(c => char.IsLower(c))) ErrorOldPassword = "Le mot de passe doit contenir au moins une minuscule";
			else if (!value.Any(c => !char.IsLetter(c) && !char.IsDigit(c))) ErrorOldPassword = "Le mot de passe doit contenir au moins un caractère spécial";
			else ErrorOldPassword = null;
		}
	}

	public string NewPassword
	{
		get { return userPasswordChange.NewPass; }
		set
		{
			userPasswordChange.NewPass = value;
			if (value.Length < 8 || value.Length > 40) ErrorNewPassword = "Le mot de passe doit contenir entre 8 et 40 caractères";
			else if (!value.Any(c => char.IsDigit(c))) ErrorNewPassword = "Le mot de passe doit contenir au moins un chiffre";
			else if (!value.Any(c => char.IsUpper(c))) ErrorNewPassword = "Le mot de passe doit contenir au moins une majuscule";
			else if (!value.Any(c => char.IsLower(c))) ErrorNewPassword = "Le mot de passe doit contenir au moins une minuscule";
			else if (!value.Any(c => !char.IsLetter(c) && !char.IsDigit(c))) ErrorNewPassword = "Le mot de passe doit contenir au moins un caractère spécial";
			else if (value != ConfirmPassword && !String.IsNullOrEmpty(value) && !String.IsNullOrEmpty(ConfirmPassword)) ErrorConfirmPassword = "Les mots de passe ne correspondent pas";
			else ErrorNewPassword = null;
		}
	}

	public string Email
	{
		get { return userUpdate.Email; }
		set
		{
			userUpdate.Email = value;
			if (emailValidationAttribute.IsValid(value)) ErrorEmail = null;
			else ErrorEmail = "Format d'email invalide: user@exemple.com";
		}
	}

	public string FirstName
	{
		get { return userUpdate.FirstName; }
		set
		{
			userUpdate.FirstName = value;
			if (value.Length < 1 || value.Length > 40) ErrorFirstName = "Le prénom doit contenir entre 1 et 40 caractères";
			else if (value.Any(c => !char.IsLetter(c))) ErrorFirstName = "Le prénom ne doit contenir que des lettres";
			else ErrorFirstName = null;
		}
	}

	public string LastName
	{
		get { return userUpdate.LastName; }
		set
		{
			userUpdate.LastName = value;
			if (value.Length < 1 || value.Length > 40) ErrorLastName = "Le nom doit contenir entre 1 et 40 caractères";
			else if (value.Any(c => !char.IsLetter(c))) ErrorLastName = "Le nom ne doit contenir que des lettres";
			else ErrorLastName = null;
		}
	}

	public string Username
	{
		get { return userUpdate.Username; }
		set
		{
			userUpdate.Username = value;
			if (value.Length < 6 || value.Length > 20) ErrorUsername = "Le pseudo doit contenir entre 6 et 20 caractères";
			else if (emailValidationAttribute.IsValid(value)) ErrorUsername = "Le pseudo ne peut pas être une adresse email";
			else ErrorUsername = null;
		}
	}

	public DateOnly BirthDate
	{
		get { return userUpdate.BirthDate; }
		set
		{
			userUpdate.BirthDate = value;
			if (value.Year < 1900 || value.Year > DateTime.Now.Year - 8) ErrorBirthDate = $"L'année de naissance doit être comprise entre 1900 et {DateTime.Now.Year - 8}";
			else ErrorBirthDate = null;
		}
	}


	public void SetGender(ChangeEventArgs e)
	{
		string? c = e.Value?.ToString();
		if (c != null)
			userUpdate.Gender = userService.GetValue(c);
	}

	private UserPasswordChange userPasswordChange = new()
	{
		NewPass = "",
		OldPass = ""
	};

	private UserData userUpdate = new()
	{
		FirstName = "",
		LastName = "",
		Username = "",
		Email = "",
		BirthDate = DateOnly.MaxValue,
		Gender = Gender.Man,
	};

	private bool isPublic = false;

	private string errorUpdateMessage = "";
	private string errorPasswordMessage = "";
	private bool CChecked = false;

	protected async override Task OnInitializedAsync()
	{
		var u = await userService.GetUserDataAsync();
		if(u is null) NavigationManager.NavigateTo("/login");
		else {
			userUpdate = u;
			isPublic = await pokémonService.IsPublic();
		}
	}

	private async void HandleUpdate()
	{
		var msg = await userService.UpdateUser(userUpdate);
		await pokémonService.SetProtection(isPublic);
		if (String.IsNullOrEmpty(msg)) NavigationManager.Refresh();
		else
		{
			errorUpdateMessage = msg;
			StateHasChanged();
		}
	}

	private async void HandlePasswordUpdate()
	{
		var msg = await userService.ChangePassword(userPasswordChange);
		if (String.IsNullOrEmpty(msg)) NavigationManager.Refresh();
		else
		{
			errorPasswordMessage = msg;
			StateHasChanged();
		}
	}

	private async Task HandleSuppression()
	{
		var result = await userService.DeleteAccount();

		NavigationManager.NavigateTo("/register");
	}

	public void CCheck()
	{
		CChecked = true;
		StateHasChanged();
	}
}